.chapter(data-title='Learn to build a RingCentral App with RingCentral Widgets')
  .chapter(data-title='Get started')
    .step(data-title='Prerequisites', data-file='README.md', data-highlight='4-15')
      :markdown
        ## Prerequisites

        * Install Node.js with version >= 8
        * Create a [RingCentral developer free account](https://developer.ringcentral.com)
        * Create a new RingCentral app with platform type - "Browser Based"
        * Add `Read Accounts` and `Subscription Webhook` to permissions
        * install `ringcentral-widgets-cli`

    .step(data-title='Initialize base project', data-file='README.md', data-highlight='18-25')
      :markdown
        ### Initialize project

        we initialize widgets project with [RingCentral Widgets CLI](https://github.com/ringcentral/ringcentral-js-widgets/tree/master/packages/ringcentral-widgets-cli).

        ```
        $ rc-widgets new ringcentral-widgets-demo
        $ cd ringcentral-widgets-demo
        $ yarn
        ```

        ### Read more

        The app is based on [RingCentral Commons](https://github.com/ringcentral/ringcentral-js-integration-commons) and [RingCentral Widgets](https://github.com/ringcentral/ringcentral-js-widgets).

        Commons modules are built with [RcModule](https://github.com/ringcentral/ringcentral-js-integration-commons/blob/master/docs/creating-modules.md) and [Dependency Injection](https://github.com/ringcentral/ringcentral-js-integration-commons/blob/master/docs/dependency-injection.md).

        RingCentral Commons depend on [Redux](https://redux.js.org/).

        RingCentral Widgets depend on [React](https://github.com/facebook/react) and [RingCentral Commons](https://github.com/ringcentral/ringcentral-js-integration-commons).

    .step(data-title='Update .env file', data-file='.env.default')
      :markdown
        Update .env with app info in ringcentral developer website.

        ```
        vim .env
        ```

        `RINGCENTRAL_CLIENT_ID` is your ringcentral app client id.

        `RINGCENTRAL_CLIENT_SECRET` is your ringcentral app client secret.

        `RINGCENTRAL_SERVER_URL` is ringcentral api server, `https://platform.devtest.ringcentral.com` for sandbox environment and `https://platform.ringcentral.com` for production.

        `REDIRECT_URI` is redirect uri that needs to add in your app settings in RingCentral Developer Website. For development in local, it should be `http://localhost:8080/redirect.html`. After your deploy this app to network space, it should be `your_host_address/redirect.html`.

    .step(data-title='Start development server', data-file='README.md', data-highlight='35-40')
      :markdown
        Start development server

        ```
        yarn start
        ```

        Visit on [http://localhost:8080](http://localhost:8080) in browser

    .step(data-title='Build for production', data-file='README.md', data-highlight='41-55')
      :markdown
        Build for production

        * Update `.env` file with production config, such as `RINGCENTRAL_SERVER_URL` and `REDIRECT_URI`.
        * Build project

        ```
        $ yarn build
        ```

        * Upload files in release folder to your network space and visit it in browser.

  .chapter(data-title='Add call history feature to App')
    .step(data-title='Add call history feature to App', data-file='README.md')
      :markdown
         Now you have finished a based RingCentral app with Widgets. So let's start to add call history feature to it.

         It includes 3 steps:

         * Add call history related modules to Phone module
         * Add call history UI container and router to App container
         * Add call history tab to MainView

         ### Add permissions

         Before we start, you need to add `Read CallLog` and `Edit Presence` permissions to your [RingCentral app](https://developer.ringcentral.com).

    .step(data-title='Add call history related modules to Phone module', data-file='src/modules/Phone/index.js' data-highlight='25-29,87-91')
      :markdown
        ## Update Phone module

        * Import call history related modules
        * Add call history related modules to dependences

    .step(data-title='Add call history UI container and router to App container', data-file='src/containers/App/index.js' data-highlight='12,139-146')
      :markdown
        ## Update App container

        * Import `CallHistoryPage`
        * Add containers to routers

    .step(data-title='Add call history tab to MainView', data-file='src/containers/MainView/index.js' data-highlight='8,11,30-35')
      :markdown
        ## Update tabs

        * Import tab icon
        * Add `Call History` tab

    .step(data-title='Play with Call History feature', data-file='README.md')
      :markdown
        ## Play with Call History feature

        Congradulations! Now you have finished adding call history feature to your app.

        Visit or refresh [http://localhost:8080](http://localhost:8080) to play with it.
  .chapter(data-title='Add ringout call feature to App')
    .step(data-title='Add ringout call feature to App', data-file='README.md')
      :markdown
        In this section, we will add RingOut Call feature to your ringcentral widgets app.

        It includes 3 steps:

        * Add call related modules to Phone module
        * Add call related container and router to App container
        * Add dialer tab to MainView

        ### Add permissions

        Before we start, you need to add `RingOut` permissions to your [RingCentral app](https://developer.ringcentral.com).

    .step(data-title='Add call related modules to Phone module', data-file='src/modules/Phone/index.js' data-highlight='30-41,92-102')
      :markdown
        ## Update Phone module

        * Import call related modules
        * Add call related modules to dependences

    .step(data-title='Add call UI container and router to App container', data-file='src/containers/App/index.js' data-highlight='7,14-16,122-138,147-164')
      :markdown
        ## Update App container

        * Import `CallingSettingsPage`, `ActiveCallsPage`, `DialerAndCallsTabContainer` and `DialerPage`
        * Add containers to routers
    .step(data-title='Add dialer tab to MainView', data-file='src/containers/MainView/index.js' data-highlight='14-15,24-29')
      :markdown
        ## Add dialer tab

        * Import tab icon
        * Add `Dial Pad` tab
    .step(data-title='Play with RingOut Call feature', data-file='README.md')
      :markdown
        ## Play with Call feature

        Congradulations! Now you have finished adding call feature to your app. Now it supports to call with RingCentral Desktop and RingOut mode. Change calling mode in Calling Setting on Setting Page.

        Visit or refresh [http://localhost:8080](http://localhost:8080) to play with it.
  .chapter(data-title='Add web phone feature to App')
    .step(data-title='Add web phone feature to App', data-file='README.md')
      :markdown
        In this section, we will add Web Phone feature to your ringcentral widgets app.

        It includes 5 steps:

        * Add web phone related modules to Phone module
        * Add web phone related container and router to App container
        * Add web phone hook into Phone module
        * Add contacts matcher into Phone module
        * Add WebphoneBadge to AppView container

        ### Add permissions

        Before we start, you need to add `VoIP Calling` permissions to your [RingCentral app](https://developer.ringcentral.com).
    .step(data-title='Add web phone related modules to Phone module', data-file='src/modules/Phone/index.js' data-highlight='54-61,125-138')
      :markdown
        ## Update Phone module

        * Import web phone related modules
        * Add web phone related modules to dependences
    .step(data-title='Add web phone UI container and router to App container', data-file='src/containers/App/index.js' data-highlight='27-31,51-72,118-121,205-231')
      :markdown
        ## Update App container

        * Import `IncomingCallPage`, `CallCtrlPage`, `CallBadgeContainer`, and `AudioSettingsPage` containers
        * Add containers to routers
    .step(data-title='Add web phone hooks to Phone module', data-file='src/modules/Phone/index.js' data-highlight='144-149,152-179')
      :markdown
        ## Add webphne hooks

        * Add webphone hook to drive route
    .step(data-title='Add contacts matcher to Phone module', data-file='src/modules/Phone/index.js' data-highlight='59,131,181-205')
      :markdown
        ## Add contact matcher

        * Match call phone number with contact name
    .step(data-title='Add WebphoneBadge to AppView container', data-file='src/containers/AppView/index.js' data-highlight='5,8,14-33,78-81,93-104,110-112,122-136')
      :markdown
        ## Add WebphoneBadge

        * show WebphoneBadge when wehphone gets errors
    .step(data-title='Play with Web phone feature', data-file='README.md')
      :markdown
        ## Play with Web phone feature

        Congradulations! Now you have finished adding web phone feature to your app. Now it supports to call with chrome in browser mode. Change calling mode in Calling Setting on Setting Page.

        Visit or refresh [http://localhost:8080](http://localhost:8080) to play with it.
  .chapter(data-title='Add messages feature to App')
    .step(data-title='Add messages feature to App', data-file='README.md')
      :markdown
         After adding calls feature, you must want to add messages feature to this app to send and receive message with RingCentral.

         It includes 3 steps:

         * Add messages related modules to Phone module
         * Add messages UI container and router to App container
         * Add messages tab to MainView

         ### Add permissions

         Before we start, you need to add `SMS`, `Internal Messages`, `Read Messages` and `Edit Messages` permissions to your [RingCentral app](https://developer.ringcentral.com).
    .step(data-title='Add messages related modules to Phone module', data-file='src/modules/Phone/index.js' data-highlight='47-50,104-107')
      :markdown
        ## Update Phone module

        * Import messages history related modules
        * Add message related modules to dependences

    .step(data-title='Add messages UI container and router to App container', data-file='src/containers/App/index.js' data-highlight='20-22,165-186')
      :markdown
        ## Update App container

        * Import `ComposeTextPage`, `ConversationsPage` and `ConversationPage`
        * Add containers to routers

    .step(data-title='Add messages tab to MainView', data-file='src/containers/MainView/index.js' data-highlight='17-18,36-45')
      :markdown
        ## Update tabs

        * Import tab icon
        * Add `Messages` tab

    .step(data-title='Play with messages feature', data-file='README.md')
      :markdown
        ## Play with messages feature

        Congradulations! Now you have finished adding messages feature to your app.

        Visit or refresh [http://localhost:8080](http://localhost:8080) to play with it.
  .chapter(data-title='Add conference feature to App')
    .step(data-title='Add conference feature to App', data-file='README.md')
      :markdown
         In this chapter, we will learn how to add conference feature to our app.

         It includes 3 steps:

         * Add conference related modules to Phone module
         * Add conference UI container and router to App container
         * Add conference tab to MainView
         * Add third party button on conference invite page

    .step(data-title='Add conference related modules to Phone module', data-file='src/modules/Phone/index.js' data-highlight='52,109')
      :markdown
        ## Update Phone module

        * Import conference related modules
        * Add conference related modules to dependences

    .step(data-title='Add conference UI container and router to App container', data-file='src/containers/App/index.v1.js' data-highlight='24-25,187-198')
      :markdown
        Update App container in `src/containers/App/index.js`

        * Import `ConferenceCommands` and `ConferencePage`
        * Add containers to routers

    .step(data-title='Add conference tab to MainView', data-file='src/containers/MainView/index.js' data-highlight='20-21,46-54')
      :markdown
        ## Update tabs

        * Import tab icon
        * Add `Conference` tab
    .step(data-title='Add a third party button', data-file='src/components/ThirdPartyConferenceInviteButton/index.js')
      :markdown
        ## Create a Button component

        Add your logics here to interact with third party platform.
        In this tutorial, we use google calendar as third party platform.
    .step(data-title='Add button to conference page', data-file='src/containers/App/index.js' data-highlight='35,195-204')
      :markdown
        ## Add button to conference page

        Pass the button component to conference page in App container.

    .step(data-title='Play with conference feature', data-file='README.md')
      :markdown
        ## Play with feature feature

        Congradulations! Now you have finished adding messages feature to your app.

        Visit or refresh [http://localhost:8080](http://localhost:8080) to play with it.
  .chapter(data-title='Add a new module')
    .step(data-title='Use CLI to generate module scaffold', data-file='src/modules/LocalPresence/index.js')
      :markdown
        ## Use CLI to generate module scaffold

        ```
        $ rc-widgets g Module LocalPresence -d DetailedPresence
        ```

        It will create a module named LocalPresence with dependence DetailedPresence in `src/modules`.
    .step(data-title='Add moudule to Phone module', data-file='src/modules/Phone/index.js' data-highlight='62,102')
      :markdown
        Import `LocalPresence` and add.
    .step(data-title='Subsciption calls', data-file='src/modules/LocalPresence/index.js' data-highlight='62-67')
      :markdown
        Check if there are calls changed on state changed.
    .step(data-title='Save data to storage - actionTypes', data-file='src/modules/LocalPresence/actionTypes.js')
      :markdown
        ## Storage - ActionTypes

        We save data into storage by a data mapping with redux.

        Before we create a reducer, let's add some actionTypes.
    .step(data-title='Save data to storage - Reducer', data-file='src/modules/LocalPresence/getReducer.js', data-highlight='4-24')
      :markdown
        ## Storage - Reducer

        Add two reducer
    .step(data-title='Save data to storage - Register', data-file='src/modules/LocalPresence/index.js', data-highlight='5-6, 12-13, 20-21, 30-31, 38-45, 86-98, 104-110')
      :markdown
        ## Storage - Register

        * Inject `GlobalStorage` and `Storage` module. `GlobalStorage` is used for global storage. It's data will not be cleaned still local storage cleaned. `Storage` is used for personal data. Data will be cleaned after user logout.

        * Register reducer into storage module

        * Save data into storage by dispatch

        * Get data by storage key

        You can set data by `phone.localPresence.updateCustomizeData(data)` in chrome console. And read day by `phone.localPresence.customizeData`.
